/**
 * angular-dark-sky
 *
 * A simple & configurable provider for the Dark Sky API including icon directive using weather-icons
 *
 * @link https://github.com/deanbot/angular-dark-sky
 * @see {@link https://darksky.net/dev/}
 * @see {@link https://darksky.net/dev/docs/|Docs}
 * @see {@link http://erikflowers.github.io/weather-icons|weather-icons}
 * @author Dean Verleger <deanverleger@gmail.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
!function () { "use strict"; function e() { var e, t = { baseUri: "https://api.darksky.net/forecast/", baseExclude: "&exclude=", acceptedUnits: ["auto", "ca", "uk2", "us", "si"], acceptedLanguage: ["ar", "az", "be", "bs", "cs", "de", "el", "en", "es", "fr", "hr", "hu", "id", "it", "is", "kw", "nb", "nl", "pl", "pt", "ru", "sk", "sr", "sv", "tet", "tr", "uk", "x-pig-latin", "zh", "zh-tw"] }, n = "us", r = "en"; this.setApiKey = function (t) { return e = t, this }, this.setUnits = function (e) { return -1 === t.acceptedUnits.indexOf(e) && console.warn(e + " not an accepted API unit."), n = e, this }, this.setLanguage = function (e) { return -1 === t.acceptedLanguage.indexOf(e) && console.warn(e + " not an accepted API language."), r = e, this }, this.$get = ["$http", "$q", function (i, a) { function u(e, t, n) { return d(e, t, n).current() } function c(e, t, n) { return d(e, t, n).daily() } function s(e, t, n) { return d(e, t, n).hourly() } function o(e, t, n) { return d(e, t, n).minutely() } function l(e, t, n) { return d(e, t, n).alerts() } function p(e, t, n) { return d(e, t, n).flags() } function f() { var e, t = "us"; switch (n && ("auto" === n ? (console.warn("Can't guess units. Defaulting to Imperial"), t = "us") : t = n), t) { case "ca": e = w(); break; case "uk2": e = b(); break; case "us": e = k(); break; case "si": e = v() }return e } function d(e, t, n) { var r; return n && n.time && (r = n.time), { current: function () { var i = m("currently") + y(n); return h(e, t, i, r) }, daily: function () { var i = m("daily") + y(n); return h(e, t, i, r) }, hourly: function () { var i = m("hourly") + y(n); return h(e, t, i, r) }, minutely: function () { var i = m("minutely") + y(n); return h(e, t, i, r) }, alerts: function () { var i = m("alerts") + y(n); return h(e, t, i, r) }, flags: function () { var i = m("flags") + y(n); return h(e, t, i, r) } } } function m(e) { var n, r = ["alerts", "currently", "daily", "flags", "hourly", "minutely"], i = r.indexOf(e); return r.splice(i, 1), n = r.join(","), t.baseExclude + n } function y(e) { var t = { extend: !1 }, n = g({}, t, e), r = ""; return e && n.extend && (r += "&extend=hourly"), r } function g(e) { e = e || {}; for (var t = 1; t < arguments.length; t++)if (arguments[t]) for (var n in arguments[t]) arguments[t].hasOwnProperty(n) && (e[n] = arguments[t][n]); return e } function h(u, c, s, o) { u && c || console.warn("no latitude or longitude sent to weather api"); var o = o ? ", " + o : "", l = "" + t.baseUri + e + "/" + u + "," + c + o + "?units=" + n + "&lang=" + r + s; return i.jsonp(l).then(function (e) { return 200 === parseInt(e.status) ? e.data : a.reject(e) }).catch(function (e, t) { return a.reject(t) }) } function k() { return { nearestStormDistance: "mi", precipIntensity: "in/h", precipIntensityMax: "in/h", precipAccumulation: "in", temperature: "f", temperatureMin: "f", temperatureMax: "f", apparentTemperature: "f", dewPoint: "f", windSpeed: "mph", pressure: "mbar", visibility: "mi" } } function v() { return { nearestStormDistance: "km", precipIntensity: "mm/h", precipIntensityMax: "mm/h", precipAccumulation: "cm", temperature: "c", temperatureMin: "c", temperatureMax: "c", apparentTemperature: "c", dewPoint: "c", windSpeed: "mps", pressure: "hPa", visibility: "km" } } function w() { var e = k(); return e.windSpeed = "km/h", e } function b() { var e = v(); return e.nearestStormDistance = e.visibility = "mi", e.windSpeed = "mph", e } var x = { getCurrent: u, getForecast: c, getDailyForecast: c, getHourlyForecast: s, getMinutelyForecast: o, getAlerts: l, getFlags: p, getUnits: f }; return e || console.warn("No Dark Sky API key set."), x }] } function t() { return { restrict: "E", scope: { icon: "@" }, template: '<i class="wi wi-forecast-io-{{ icon }} wi-dark-sky-{{ icon }}"></i>' } } angular.module("dark-sky", []).provider("darkSky", e).directive("darkSkyIcon", ["darkSky", t]) }();
